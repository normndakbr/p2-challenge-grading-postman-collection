{
	"info": {
		"_postman_id": "2f89b94f-a78a-4577-b0be-a9f21d0f523a",
		"name": "p2_challenge_grading_postman_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**",
							" * 1. Body: {",
							" *      username: string (optional)",
							" *      email: string,",
							" *      password: string,",
							" *      phoneNumber: string,",
							" *      address: string",
							" *    }",
							" */",
							"",
							"const host = pm.collectionVariables.get('host');",
							"const register = pm.collectionVariables.get('register');",
							"",
							"pm.test('Successful register (201)', function () {",
							"    const user = {",
							"        username: 'postman_test_1',",
							"        email: 'postman_test_1@mail.com', // Change this value when you re-run the test",
							"        password: 'password',",
							"        phoneNumber: 12345,",
							"        address: 'here'",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${register}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: JSON.stringify(user)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(201);",
							"            const responseJson = response.json();",
							"            console.log('Successful register (201):', responseJson);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unsuccessful register because of email is null (400)', function () {",
							"    const user = {",
							"        username: 'postman_test_2',",
							"        password: 'password',",
							"        phoneNumber: 12345,",
							"        address: 'here'",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${register}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: JSON.stringify(user)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(400);",
							"            const responseJson = response.json();",
							"            console.log('Unsuccessful register because of email is null (400):', responseJson);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unsuccessful register because of password is null (400)', function () {",
							"    const user = {",
							"        username: 'postman_test_3',",
							"        email: 'postman_test_3@mail.com',",
							"        phoneNumber: 12345,",
							"        address: 'here'",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${register}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: JSON.stringify(user)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(400);",
							"            const responseJson = response.json();",
							"            console.log('Unsuccessful register because of password is null (400):', responseJson);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unsuccessful register because of password is short (400)', function () {",
							"    const user = {",
							"        username: 'postman_test_4',",
							"        email: 'postman_test_4@mail.com',",
							"        password: 'pass',",
							"        phoneNumber: 12345,",
							"        address: 'here'",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${register}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: JSON.stringify(user)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(400);",
							"            const responseJson = response.json();",
							"            console.log('Unsuccessful register because of password is short (400)', responseJson);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unsuccessful register because of wrong email format (400)', function () {",
							"    const user = {",
							"        username: 'postman_test_5',",
							"        email: 'postman_test_5atmaildotcom',",
							"        password: 'password',",
							"        phoneNumber: 12345,",
							"        address: 'here'",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${register}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: JSON.stringify(user)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(400);",
							"            const responseJson = response.json();",
							"            console.log('Unsuccessful register because of wrong email format (400):', responseJson);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unsuccessful register because of email already exists (400 or 409)', function () {",
							"    const user = {",
							"        username: 'testadmin',",
							"        email: 'testadmin@mail.com',",
							"        password: 'password',",
							"        phoneNumber: 12345,",
							"        address: 'here'",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${register}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: JSON.stringify(user)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).to.be.oneOf([400, 409]);",
							"            const responseJson = response.json();",
							"            console.log('Unsuccessful register because of email already exists (400 or 409):', responseJson);",
							"        }",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{host}}/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**",
							" * 1. Prerequisites:",
							" *    - POST /register should work",
							" * 2. Body: {",
							" *      email: string,",
							" *      password: string",
							" *    }",
							" */",
							"",
							"const host = pm.collectionVariables.get('host');",
							"const login = pm.collectionVariables.get('login');",
							"",
							"pm.test('Successful login (200)', function () {",
							"    const user = {",
							"        email: 'testadmin@mail.com',",
							"        password: 'password'",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${login}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: JSON.stringify(user)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(200);",
							"            const responseJson = response.json();",
							"            console.log('Successful login (200):', responseJson);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unsuccessful login because of wrong email (401)', function () {",
							"    const user = {",
							"        email: 'wrong@mail.com',",
							"        password: 'password'",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${login}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: JSON.stringify(user)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(401);",
							"            const responseJson = response.json();",
							"            console.log('Unsuccessful login because of wrong email (401):', responseJson);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unsuccessful login because of wrong password (401)', function () {",
							"    const user = {",
							"        email: 'testadmin@mail.com',",
							"        password: 'wrongpassword'",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${login}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: JSON.stringify(user)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(401);",
							"            const responseJson = response.json();",
							"            console.log('Unsuccessful login because of wrong password (401):', responseJson);",
							"        }",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{host}}/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/entities",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**",
							" * 1. Prerequisites:",
							" *    - POST /login should work",
							" * 2. Body:",
							" *    - Based on theme",
							" * 3. Headers: {",
							" *      access_token: string",
							" *    }",
							" */",
							"",
							"const host = pm.collectionVariables.get('host');",
							"const entities = pm.collectionVariables.get('entities');",
							"",
							"pm.test('Successful to post an entity as admin (201)', function () {",
							"    // See testData collection variable",
							"    const testData = {",
							"        \"name\": \"test\",",
							"        \"description\": \"test description\",",
							"        \"imgUrl\": \"http://localhost:3000/test.png\",",
							"        \"location\": \"here\",",
							"        \"price\": 500000,",
							"        \"typeId\": 1",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('admin_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(201);",
							"            const responseJson = response.json();",
							"            console.log('Successful to post an entity as admin (201):', responseJson);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Successful to post an entity as staff (201)', function () {",
							"    // See testData collection variable",
							"    const testData = {",
							"        \"name\": \"test\",",
							"        \"description\": \"test description\",",
							"        \"imgUrl\": \"http://localhost:3000/test.png\",",
							"        \"location\": \"here\",",
							"        \"price\": 500000,",
							"        \"typeId\": 1",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('staff_1_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(201);",
							"            const responseJson = response.json();",
							"            console.log('Successful to post an entity as staff (201):', responseJson);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unsuccessful to post an entity because of validation 1 (400)', function () {",
							"    // See testData collection variable",
							"    const testData = {",
							"        \"description\": \"test description\",",
							"        \"imgUrl\": \"http://localhost:3000/test.png\",",
							"        \"location\": \"here\",",
							"        \"price\": 500000,",
							"        \"typeId\": 1",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('admin_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(400);",
							"            const responseJson = response.json();",
							"            console.log('Unsuccessful to post an entity because of validation 1 (400):', responseJson);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unsuccessful to post an entity because of validation 2 (400)', function () {",
							"    // See testData collection variable",
							"    const testData = {",
							"        \"name\": \"test\",",
							"        \"imgUrl\": \"http://localhost:3000/test.png\",",
							"        \"location\": \"here\",",
							"        \"price\": 500000,",
							"        \"typeId\": 1",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('admin_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(400);",
							"            const responseJson = response.json();",
							"            console.log('Unsuccessful to post an entity because of validation 2 (400):', responseJson);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unsuccessful to post an entity because of validation 3 (400)', function () {",
							"    // See testData collection variable",
							"    const testData = {",
							"        \"name\": \"test\",",
							"        \"description\": \"test description\",",
							"        \"imgUrl\": \"http://localhost:3000/test.png\",",
							"        \"location\": \"here\",",
							"        \"typeId\": 1",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('admin_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(400);",
							"            const responseJson = response.json();",
							"            console.log('Unsuccessful to post an entity because of validation 3 (400):', responseJson);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unsuccessful to post an entity because of no access_token (401)', function () {",
							"    // See testData collection variable",
							"    const testData = {",
							"        \"name\": \"test\",",
							"        \"description\": \"test description\",",
							"        \"imgUrl\": \"http://localhost:3000/test.png\",",
							"        \"location\": \"here\",",
							"        \"price\": 500000,",
							"        \"typeId\": 1",
							"    };",
							"    const testRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(401);",
							"            const responseJson = response.json();",
							"            console.log('Unsuccessful to post an entity because of no access_token (401)', responseJson);",
							"        }",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{host}}/entities",
					"host": [
						"{{host}}"
					],
					"path": [
						"entities"
					]
				}
			},
			"response": []
		},
		{
			"name": "/entities",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const host = pm.collectionVariables.get('host');",
							"const entities = pm.collectionVariables.get('entities');",
							"const testData = JSON.parse(pm.collectionVariables.get('testData'));",
							"",
							"const preRequestPostEntity = {",
							"    url: `${host}/${entities}`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"        access_token: pm.variables.get('admin_access_token')",
							"    },",
							"    body: JSON.stringify(testData)",
							"};",
							"",
							"// Create an entity",
							"pm.sendRequest(preRequestPostEntity, function (error, response) {",
							"    if (error) console.log(error);",
							"    else {",
							"        const responseJson = response.json();",
							"        console.log('pre-request:', responseJson);",
							"        // Create an entity",
							"        pm.sendRequest(preRequestPostEntity, function (error, response) {",
							"            if (error) console.log(error);",
							"            else {",
							"                const responseJson = response.json();",
							"                console.log('pre-request:', responseJson);",
							"            }",
							"        });",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**",
							" * 1. Prerequisites:",
							" *    - POST /login should work",
							" *    - POST /entities should work",
							" * 2. Headers: {",
							" *      access_token: string",
							" *    }",
							" */",
							"",
							"const host = pm.collectionVariables.get('host');",
							"const entities = pm.collectionVariables.get('entities');",
							"",
							"pm.test('Successful to get entities as admin (200)', function () {",
							"    const testRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'GET',",
							"        header: {",
							"            access_token: pm.variables.get('admin_access_token')",
							"        }",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(200);",
							"            const responseJson = response.json();",
							"            console.log('Successful to get entities as admin (200):', responseJson);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Successful to get entities as staff (200)', function () {",
							"    const testRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'GET',",
							"        header: {",
							"            access_token: pm.variables.get('staff_1_access_token')",
							"        }",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(200);",
							"            const responseJson = response.json();",
							"            console.log('Successful to get entities as staff (200):', responseJson);",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unsuccessful to get entities because of no access_token (401)', function () {",
							"    const testRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'GET',",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(401);",
							"            const responseJson = response.json();",
							"            console.log('Unsuccessful to get entities because of no access_token (401):', responseJson);",
							"        }",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/entities",
					"host": [
						"{{host}}"
					],
					"path": [
						"entities"
					]
				}
			},
			"response": []
		},
		{
			"name": "/entities/:id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**",
							" * 1. Prerequisites:",
							" *    - POST /login should work",
							" *    - POST /entities should work",
							" * 2. Headers: {",
							" *      access_token: string",
							" *    }",
							" */",
							"",
							"const host = pm.collectionVariables.get('host');",
							"const entities = pm.collectionVariables.get('entities');",
							"const testData = JSON.parse(pm.collectionVariables.get('testData'));",
							"",
							"pm.test('Successful to get an entity by id as admin (200)', function () {",
							"    const testPostRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('admin_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testPostRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(201);",
							"            const responseJson = response.json();",
							"            console.log('Successful to get an entity by id as admin (200) [1]:', responseJson);",
							"            const testRequest = {",
							"                url: `${host}/${entities}/${responseJson.id}`, // see the response",
							"                method: 'GET',",
							"                header: {",
							"                    access_token: pm.variables.get('admin_access_token')",
							"                }",
							"            };",
							"            pm.sendRequest(testRequest, function (error, response) {",
							"                if (error) console.log(error);",
							"                else {",
							"                    pm.expect(response.code).equal(200);",
							"                    const responseJson = response.json();",
							"                    console.log('Successful to get an entity by id as admin (200) [2]:', responseJson);",
							"                }",
							"            });",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Successful to get an entity by id as staff (200)', function () {",
							"    const testPostRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('staff_1_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testPostRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(201);",
							"            const responseJson = response.json();",
							"            console.log('Successful to get an entity by id as staff (200) [1]:', responseJson);",
							"            const testRequest = {",
							"                url: `${host}/${entities}/${responseJson.id}`, // see the response",
							"                method: 'GET',",
							"                header: {",
							"                    access_token: pm.variables.get('staff_1_access_token')",
							"                }",
							"            };",
							"            pm.sendRequest(testRequest, function (error, response) {",
							"                if (error) console.log(error);",
							"                else {",
							"                    pm.expect(response.code).equal(200);",
							"                    const responseJson = response.json();",
							"                    console.log('Successful to get an entity by id as staff (200) [2]:', responseJson);",
							"                }",
							"            });",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unsuccessful to get an entity because of no access_token (401)', function () {",
							"    const testPostRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('admin_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testPostRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(201);",
							"            const responseJson = response.json();",
							"            console.log('Unsuccessful to get an entity because of no access_token (401) [1]:', responseJson);",
							"            const testRequest = {",
							"                url: `${host}/${entities}/${responseJson.id}`, // see the response",
							"                method: 'GET'",
							"            };",
							"            pm.sendRequest(testRequest, function (error, response) {",
							"                if (error) console.log(error);",
							"                else {",
							"                    pm.expect(response.code).equal(401);",
							"                    const responseJson = response.json();",
							"                    console.log('Unsuccessful to get an entity because of no access_token (401) [2]:', responseJson);",
							"                }",
							"            });",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unsuccessful to get an entity because it does not exist (404)', function () {",
							"    const testRequest = {",
							"        url: `${host}/${entities}/99999`,",
							"        method: 'GET',",
							"        header: {",
							"            access_token: pm.variables.get('admin_access_token')",
							"        }",
							"    };",
							"    pm.sendRequest(testRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(404);",
							"            const responseJson = response.json();",
							"            console.log('Unsuccessful to get an entity because it does not exist (404):', responseJson);",
							"        }",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/entities/:id",
					"host": [
						"{{host}}"
					],
					"path": [
						"entities",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/entities/:id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**",
							" * 1. Prerequisites:",
							" *    - POST /login should work",
							" *    - POST /entities should work",
							" * 2. Body:",
							" *    - Based on theme",
							" * 3. Headers: {",
							" *      access_token: string",
							" *    }",
							" */",
							"",
							"const host = pm.collectionVariables.get('host');",
							"const entities = pm.collectionVariables.get('entities');",
							"const testData = JSON.parse(pm.collectionVariables.get('testData'));",
							"const updateData = JSON.parse(pm.collectionVariables.get('updateData'));",
							"",
							"pm.test('Successful to update own entity as admin (200)', function () {",
							"    const testPostRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('admin_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testPostRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(201);",
							"            const responseJson = response.json();",
							"            console.log('Successful to update own entity as admin (200) [1]:', responseJson);",
							"            const testRequest = {",
							"                url: `${host}/${entities}/${responseJson.id}`, // see the response",
							"                method: 'PUT',",
							"                header: {",
							"                    'Content-Type': 'application/json',",
							"                    access_token: pm.variables.get('admin_access_token')",
							"                },",
							"                body: JSON.stringify(updateData)",
							"            };",
							"            pm.sendRequest(testRequest, function (error, response) {",
							"                if (error) console.log(error);",
							"                else {",
							"                    pm.expect(response.code).equal(200);",
							"                    const responseJson = response.json();",
							"                    console.log('Successful to update own entity as admin (200) [2]:', responseJson);",
							"                }",
							"            });",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Successful to update staff entity as admin (200)', function () {",
							"    const testPostRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('staff_1_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testPostRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(201);",
							"            const responseJson = response.json();",
							"            console.log('Successful to update staff entity as admin (200) [1]:', responseJson);",
							"            const testRequest = {",
							"                url: `${host}/${entities}/${responseJson.id}`, // see the response",
							"                method: 'PUT',",
							"                header: {",
							"                    'Content-Type': 'application/json',",
							"                    access_token: pm.variables.get('admin_access_token')",
							"                },",
							"                body: JSON.stringify(updateData)",
							"            };",
							"            pm.sendRequest(testRequest, function (error, response) {",
							"                if (error) console.log(error);",
							"                else {",
							"                    pm.expect(response.code).equal(200);",
							"                    const responseJson = response.json();",
							"                    console.log('Successful to update staff entity as admin (200) [2]:', responseJson);",
							"                }",
							"            });",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Successful to update own entity as staff (200)', function () {",
							"    const testPostRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('staff_1_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testPostRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(201);",
							"            const responseJson = response.json();",
							"            console.log('Successful to update own entity as staff (200) [1]:', responseJson);",
							"            const testRequest = {",
							"                url: `${host}/${entities}/${responseJson.id}`, // see the response",
							"                method: 'PUT',",
							"                header: {",
							"                    'Content-Type': 'application/json',",
							"                    access_token: pm.variables.get('staff_1_access_token')",
							"                },",
							"                body: JSON.stringify(updateData)",
							"            };",
							"            pm.sendRequest(testRequest, function (error, response) {",
							"                if (error) console.log(error);",
							"                else {",
							"                    pm.expect(response.code).equal(200);",
							"                    const responseJson = response.json();",
							"                    console.log('Successful to update own entity as staff (200) [2]:', responseJson);",
							"                }",
							"            });",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unuccessful to update staff 1 entity as staff 2 (403)', function () {",
							"    const testPostRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('staff_1_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testPostRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(201);",
							"            const responseJson = response.json();",
							"            console.log('Unuccessful to update staff 1 entity as staff 2 (403) [1]:', responseJson);",
							"            const testRequest = {",
							"                url: `${host}/${entities}/${responseJson.id}`, // see the response",
							"                method: 'PUT',",
							"                header: {",
							"                    'Content-Type': 'application/json',",
							"                    access_token: pm.variables.get('staff_2_access_token')",
							"                },",
							"                body: JSON.stringify(updateData)",
							"            };",
							"            pm.sendRequest(testRequest, function (error, response) {",
							"                if (error) console.log(error);",
							"                else {",
							"                    pm.expect(response.code).equal(403);",
							"                    const responseJson = response.json();",
							"                    console.log('Unuccessful to update staff 1 entity as staff 2 (403) [2]:', responseJson);",
							"                }",
							"            });",
							"        }",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{host}}/entities/:id",
					"host": [
						"{{host}}"
					],
					"path": [
						"entities",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/entities/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**",
							" * 1. Prerequisites:",
							" *    - POST /login should work",
							" *    - POST /entities should work",
							" * 2. Headers: {",
							" *      access_token: string",
							" *    }",
							" */",
							"",
							"const host = pm.collectionVariables.get('host');",
							"const entities = pm.collectionVariables.get('entities');",
							"const testData = JSON.parse(pm.collectionVariables.get('testData'));",
							"",
							"pm.test('Successful to delete own entity as admin (200)', function () {",
							"    const testPostRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('admin_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testPostRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(201);",
							"            const responseJson = response.json();",
							"            console.log('Successful to delete own entity as admin (200) [1]:', responseJson);",
							"            const testRequest = {",
							"                url: `${host}/${entities}/${responseJson.id}`, // see the response",
							"                method: 'DELETE',",
							"                header: {",
							"                    access_token: pm.variables.get('admin_access_token')",
							"                }",
							"            };",
							"            pm.sendRequest(testRequest, function (error, response) {",
							"                if (error) console.log(error);",
							"                else {",
							"                    pm.expect(response.code).equal(200);",
							"                    const responseJson = response.json();",
							"                    console.log('Successful to delete own entity as admin (200) [2]:', responseJson);",
							"                }",
							"            });",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Successful to delete staff entity as admin (200)', function () {",
							"    const testPostRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('staff_1_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testPostRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(201);",
							"            const responseJson = response.json();",
							"            console.log('Successful to delete staff entity as admin (200) [1]:', responseJson);",
							"            const testRequest = {",
							"                url: `${host}/${entities}/${responseJson.id}`, // see the response",
							"                method: 'DELETE',",
							"                header: {",
							"                    access_token: pm.variables.get('admin_access_token')",
							"                }",
							"            };",
							"            pm.sendRequest(testRequest, function (error, response) {",
							"                if (error) console.log(error);",
							"                else {",
							"                    pm.expect(response.code).equal(200);",
							"                    const responseJson = response.json();",
							"                    console.log('Successful to delete staff entity as admin (200) [2]:', responseJson);",
							"                }",
							"            });",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Successful to delete own entity as staff (200)', function () {",
							"    const testPostRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('staff_1_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testPostRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(201);",
							"            const responseJson = response.json();",
							"            console.log('Successful to delete own entity as staff (200) [1]:', responseJson);",
							"            const testRequest = {",
							"                url: `${host}/${entities}/${responseJson.id}`, // see the response",
							"                method: 'DELETE',",
							"                header: {",
							"                    access_token: pm.variables.get('staff_1_access_token')",
							"                }",
							"            };",
							"            pm.sendRequest(testRequest, function (error, response) {",
							"                if (error) console.log(error);",
							"                else {",
							"                    pm.expect(response.code).equal(200);",
							"                    const responseJson = response.json();",
							"                    console.log('Successful to delete own entity as staff (200) [2]:', responseJson);",
							"                }",
							"            });",
							"        }",
							"    });",
							"});",
							"",
							"pm.test('Unuccessful to delete staff 1 entity as staff 2 (403)', function () {",
							"    const testPostRequest = {",
							"        url: `${host}/${entities}`,",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json',",
							"            access_token: pm.variables.get('staff_1_access_token')",
							"        },",
							"        body: JSON.stringify(testData)",
							"    };",
							"    pm.sendRequest(testPostRequest, function (error, response) {",
							"        if (error) console.log(error);",
							"        else {",
							"            pm.expect(response.code).equal(201);",
							"            const responseJson = response.json();",
							"            console.log('Unuccessful to delete staff 1 entity as staff 2 (403) [1]:', responseJson);",
							"            const testRequest = {",
							"                url: `${host}/${entities}/${responseJson.id}`, // see the response",
							"                method: 'DELETE',",
							"                header: {",
							"                    access_token: pm.variables.get('staff_2_access_token')",
							"                }",
							"            };",
							"            pm.sendRequest(testRequest, function (error, response) {",
							"                if (error) console.log(error);",
							"                else {",
							"                    pm.expect(response.code).equal(403);",
							"                    const responseJson = response.json();",
							"                    console.log('Unuccessful to delete staff 1 entity as staff 2 (403) [2]:', responseJson);",
							"                }",
							"            });",
							"        }",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/entities/:id",
					"host": [
						"{{host}}"
					],
					"path": [
						"entities",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": null
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const host = pm.collectionVariables.get('host');",
					"const register = pm.collectionVariables.get('register');",
					"const login = pm.collectionVariables.get('login');",
					"",
					"const preRequestLoginAdmin = {",
					"    url: `${host}/${login}`,",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/json'",
					"    },",
					"    body: JSON.stringify({",
					"        email: 'testadmin@mail.com',",
					"        password: 'password'",
					"    })",
					"};",
					"",
					"const preRequestLoginStaff1 = {",
					"    url: `${host}/${login}`,",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/json'",
					"    },",
					"    body: JSON.stringify({",
					"        email: 'teststaff1@mail.com',",
					"        password: 'password'",
					"    })",
					"};",
					"",
					"const preRequestLoginStaff2 = {",
					"    url: `${host}/${login}`,",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/json'",
					"    },",
					"    body: JSON.stringify({",
					"        email: 'teststaff2@mail.com',",
					"        password: 'password'",
					"    })",
					"};",
					"",
					"// Get admin access_token by logging in as admin",
					"pm.sendRequest(preRequestLoginAdmin, function (error, response) {",
					"    if (error) console.log(error);",
					"    else {",
					"        const responseJson = response.json();",
					"        console.log('pre-request:', responseJson);",
					"        pm.variables.set('admin_access_token', responseJson.access_token);",
					"        // Get staff 1 access_token by logging in as staff",
					"        pm.sendRequest(preRequestLoginStaff1, function (error, response) {",
					"            if (error) console.log(error);",
					"            else {",
					"                const responseJson = response.json();",
					"                pm.variables.set('staff_1_access_token', responseJson.access_token);",
					"                console.log('pre-request:', responseJson);",
					"                // Get staff 2 access_token by logging in as staff",
					"                pm.sendRequest(preRequestLoginStaff2, function (error, response) {",
					"                    if (error) console.log(error);",
					"                    else {",
					"                        const responseJson = response.json();",
					"                        pm.variables.set('staff_2_access_token', responseJson.access_token);",
					"                        console.log('pre-request:', responseJson);",
					"                    }",
					"                });",
					"            }",
					"        });",
					"    }",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "register",
			"value": "register",
			"type": "string"
		},
		{
			"key": "login",
			"value": "login",
			"type": "string"
		},
		{
			"key": "entities",
			"value": "transportations",
			"type": "string"
		},
		{
			"key": "testData",
			"value": "{\n  \"name\": \"test\",\n  \"description\": \"test description\",\n  \"imgUrl\": \"http://site.com/test.png\",\n  \"location\": \"here\",\n  \"price\": 500000,\n  \"typeId\": 1\n}",
			"type": "string"
		},
		{
			"key": "updateData",
			"value": "{\n  \"name\": \"test update\",\n  \"description\": \"test description update\",\n  \"imgUrl\": \"http://site.com/update.png\",\n  \"location\": \"here update\",\n  \"price\": 500001,\n  \"typeId\": 1\n}",
			"type": "string"
		}
	]
}